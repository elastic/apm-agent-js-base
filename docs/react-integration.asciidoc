[[react-integration]]
=== React integration

This document covers how to use React integration with Real User Monitoring JavaScript agent.
Please see our <<getting-started, Getting started guide>> for configuring the Real User Monitoring agent.

[[installing-react-integration]]
==== Installing Elastic APM React package

Install the `@elastic/apm-rum-react` package as a dependency to your application:

[source,bash]
----
npm install @elastic/apm-rum-react --save
----

==== Instrumenting your React application

The React integration package provides two approaches to instrumenting your application:

===== Instrumenting application routes

To instrument the application routes, you can use `ApmRoute` component provided in the package. 
`ApmRoute` creates a transaction that has the path of the `Route` as its name and has `route-change`
as its type.

NOTE: Currently `ApmRoute` only supports applications using `react-router` library.

First you should import `ApmRoute` from the `@elastic/apm-rum-react` package:

[source,js]
----
import { ApmRoute } from '@elastic/apm-rum-react'
----

Then, you should replace `Route` components from the `react-router` library
with `ApmRoute`. You can use `ApmRoute` in any of the routes that you would like to monitor,
 therefore, you don't have to change all of your routes:


[source,js]
----
class App extends React.Component {
    render() {
        return (
            <div>
                <ApmRoute
                    exact
                    path="/"
                    component={() => (
                        <Redirect
                            to={{
                                pathname: '/home'
                            }}
                        />
                    )}
                />
                <ApmRoute path="/home" component={HomeComponent} />
                <Route path="/about" component={AboutComponent} />
            </div>
        )
    }
}
----

===== Instrumenting individual React components

First you should import `withTransaction` from the `@elastic/apm-rum-react` package:

[source,js]
----
import { withTransaction } from '@elastic/apm-rum-react'
----


Then, you can use `withTransaction` to decorate your React components,
either using the decorator notation:

[source,js]
----
@withTransaction('AboutComponent', 'component')
class AboutComponent extends React.Component { }
----


Or, using `withTransaction` as a function:


[source,js]
----
class AboutComponent extends React.Component { }
export default withTransaction('AboutComponent', 'component')(AboutComponent)
----


NOTE: `withTransaction` accepts two parameters, "transaction name" and "transaction type". 
If these parameters are not provided the defaults documented in <<transaction-api, Transaction API>> will be used.
