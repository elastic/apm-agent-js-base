[[sourcemap]]
== Source Map

It is a common practice to minify JavaScript bundles,
However debugging minified files is inherently difficult. To resolve this issue,
you can generate source maps for your bundles and upload them to the APM server.

Here is an example to generate source maps with webpack and configure the JavaScript agent accordingly.

First you need to configure webpack to generate source map and provide the app version to your app:

[source,js]
----
var webpack = require('webpack')
const UglifyJSPlugin = require('uglifyjs-webpack-plugin')
module.exports = {
  entry: 'app.js',
  output: {
    filename: 'app.min.js',
    path: './dist'
  },
  devtool: 'source-map',
  plugins: [
    new webpack.DefinePlugin({'appVersion': JSON.stringify(require("./package.json").version)}),
    new UglifyJSPlugin({
      sourceMap: true
    })
  ]
}
----

Then you can use the provided app version to set the "serviceVersion" configuration:

[source,js]
----
import { init as initApm } from 'elastic-apm-js-base'
var apm = initApm({
  // Set required service name
  serviceName: 'service-name',
  
  // Set service version (required for source map feature)
  serviceVersion: appVersion
})
----

Make sure to upload the generated source map file to APM server with the same "serviceVersion" 
and "serviceName".

Here is a Node.js example of uploading source map file to the APM server:

[source,js]
----
console.log('Uploading sourcemaps!')
var request = require('request')
var filepath = './dist/app.min.js'
var formData = {
  sourcemap: fs.createReadStream(filepath),
  service_version: require("./package.json").version,
  bundle_filepath: 'http://localhost/app.min.js',
  service_name: 'service-name'
}
request.post({url: 'http://localhost:8200/v1/client-side/sourcemaps',formData: formData}, function (err, resp, body) {
  if (err) {
    console.log('Error while uploading sourcemaps!', err)
  } else {
    console.log('Sourcemaps uploaded!')
  }
})
----