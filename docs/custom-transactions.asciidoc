[[custom-transactions]]
=== Custom Transactions

Elastic APM uses the concept of transactions and spans to collect performance data. Spans are used to measure an operation and they
are grouped into the transactions.

By default Elastic APM JS agent creates transactions for all the <<supported-technologies, Supported Technologies>> and send them to the apm-server, however if the current instrumentation doesn't provide all the insights, you can create custom transactions to fill the gaps.

Here is an example of using custom transactions and spans:

[source,js]
----
const transaction = apm.startTransaction('Application start', 'custom')
const url = 'http://example.com/data.json'
const httpSpan = transaction.startSpan('GET ' + url, 'external.http')
fetch(url)
  .then((resp) => {
    if (!resp.ok) {
      apm.captureError(new Error(`fetch failed with status ${resp.status} ${resp.statusText}`))
    }
    httpSpan.end()
    transaction.end()
  })
----

NOTE: By default custom transactions are not managed by the agent, therefore,
the agent does not create spans based on <<supported-technologies,automatic instrumentations>>, e.g. XHR instrumentation.

[float]
[[custom-managed-transactions]]
==== Creating a Managed transaction

If you want to create a custom transaction and associate all the other timing information and spans based on the <<supported-technologies,supported technologies>>, you can set the `managed` flag to `true` and it will be controlled by the agent. However the transaction might get
closed automatically once all the assocaited pending spans and tasks are completed. If you want to control the ending of this transaction, you can create a blocking span that will hold the transaction until `span.end` is called.

[source,js]
----
const transaction = apm.startTransaction('custom managed', 'custom', { managed: true })
const span = transaction.startSpan('async-task', 'app', { blocking: true })

setTimeout(() => {
  span.end()
  // this would also end the managed transaction as all blocking tasks are completed and
  // transaction would also contain other timing information and spans similar to page-load and route-change.
}, 3000)

----

NOTE: Both custom and managed transactions are queued and sent together automatically after `transaction.end` is called.
