[[api]]
== API Reference

You can access agent API after initializing the agent: 

[source,js]
----
var apm = require('elastic-apm-js-base').init(...)
----


[float]
[[apm-set-user-context]]
=== `apm.setUserContext()`

[source,js]
----
apm.setUserContext(context)
----

Call this method to enrich collected performance data and errors with information about the user.

The given `context` argument must be an object and can contain the following properties (all optional):

* `id` - The users ID
* `username` - The users username
* `email` - The users e-mail


The provided user context is stored under `context.user` in Elasticsearch on both errors and transactions.


[float]
[[apm-set-custom-context]]
=== `apm.setCustomContext()`

[source,js]
----
apm.setCustomContext(context)
----

Call this to enrich collected errors and transactions with any information that you think will help you debug performance issues or errors.

The provided custom context is stored under `context.custom` in Elasticsearch on both errors and transactions.

The given `context` argument must be an object and can contain any property that can be JSON encoded.


[float]
[[apm-set-tags]]
=== `apm.setTags()`

[source,js]
----
apm.setTags(tags)
----

Set tags on transactions and errors.

Tags are key/value pairs that are indexed by Elasticsearch and therefore searchable (as opposed to data set via `setCustomContext()`). You can set multiple tags.

Arguments:

* `tags` - Any key/value object with the following specifications:
** key - Any string. Must not contain periods (`.`) as those have special meaning in Elasticsearch
** value - Any string. If a non-string data type is given, it's converted to a string before being sent to the APM Server.


[float]
[[apm-add-filter]]
=== `apm.addFilter()`

A filter can be used to modify the APM payload before it is sent to the apm-server.
This can be useful in for example redacting sensitive information from the payload:

[source,js]
----
apm.addFilter(function (payload) {
  if (payload.errors) {
    payload.errors.forEach(function (error) {
      error.exception.message = error.exception.message.replace('secret', '[REDACTED]')
    })
  }
  if (payload.transactions) {
    payload.transactions.forEach(function (tr) {
      tr.spans.forEach(function (span) {
        if (span.context && span.context.http && span.context.http.url) {
          var url = new URL(span.context.http.url.raw)
          if (url.searchParams.get('token')) {
            url.searchParams.set('token', 'REDACTED')
          }
          span.context.http.url.raw = url.toString()
        }
      })
    })
  }
  // Make sure to return the payload
  return payload
})
----

NOTE: The payload will be dropped if one of the filters return a falsy value.


[float]
[[apm-start-transaction]]
=== `apm.startTransaction()`

[source,js]
----
apm.startTransaction(name, type)
----


Starts and returns a new transaction.

Arguments:

* `name` - The name of the transsaction (string).
* `type` - The type of the transsaction (string).


Use this method to create a custom transaction.

NOTE: Calling this method would result in ending the current transaction and replacing it with the new transaction.

NOTE: This method returns `undefined` if apm is disabled or if `isActive` is set to `false`.

[float]
[[apm-start-span]]
=== `apm.startSpan()`

[source,js]
----
apm.startSpan(name, type)
----

Starts and returns a new span on the current transaction.

Arguments:

* `name` - The name of the span (string).
* `type` - The type of the span (string).

NOTE: This method returns `undefined` if apm is disabled or if `isActive` is set to `false`.