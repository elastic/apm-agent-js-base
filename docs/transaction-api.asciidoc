[[transaction-api]]

=== `Transaction` API

A transaction groups multiple spans in a logical group.

To start a transaction,
you need to call <<apm-start-transaction,`apm.startTransaction()`>>.

To see an example of using custom transactions,
see the <<custom-transactions,Custom Transactions>> article.

[float]
[[transaction-name]]
==== `transaction.name`

* *Type:* String
* *Default:* `Unknown`

The name of the transaction.

Can be used to set or overwrite the name of the transaction (visible in the performance monitoring breakdown).


[float]
[[transaction-type]]
==== `transaction.type`

* *Type:* String
* *Default:* `custom`

The type of the transaction.


[float]
[[transaction-timestamp]]
==== `transaction.timestamp`

* *Type:* String
* *Default:* `undefined`

The timestamp of the transaction.
If the transaction timestamp is not provided (the default behaviour), it will be set by the apm-server (v6.3+).
You can, however, set the timestamp on the client (using `new Date().toISOString()`), but you should be aware that the timestamp will reflect the client's local time
which might not always be accurate.


[float]
[[transaction-start-span]]
==== `transaction.startSpan([name][, type][, options])`

[source,js]
----
const span = transaction.startSpan('My custom span')
----

Start and return a new custom span associated with this transaction.

Arguments:

* `name` - The name of the span (string). Defaults to `unnamed`

* `type` - The type of span (string). Defaults to `custom`

* `options` - The following options are supported:

** `blocked` - Blocks the associated transaction from ending till this span is ended. Blocked spans
    automatically creates a task. Defaults to false

** `parentId` - Parent id associated with the new span. Defaults to current transaction id

** `sync` - Denotes if the span is synchronous or asynchronous.

When a span is started it will measure the time until <<span-end,`span.end()`>> is called.

See <<span-api,Span API>> docs for details on how to use custom spans.

[float]
[[transaction-add-task]]
==== `transaction.addTask([taskId])`

[source,js]
----
const taskId = transaction.addTask('async-task')
----

Starts a new task for the current transaction and returns the new task id. The transaction does not end till all the tasks are
removed from the transacion.

Arguments:

* `name` - Optional. The name of the task (string). Defaults to a random id.

Tasks are pretty new and its available only on the RUM agent. Most of the time, the users shouldn't need to create tasks as
custom transactions created by the user ends only when `transaction.end` method is called. However in the case of managed transactions like page-load, route-change and other user created ones by setting `managed: true` flag, the transaction might get closed automatically prior to the user's expectation once all the associated tasks are completed. Please check the <<custom-managed-transactions, custom transactions>> guide to understand how you can control the behaviour of transaction using tasks.


NOTE: This API will be removed in the next major version, Please use the `startSpan` method with `blocking: true`.


[float]
[[transaction-remove-task]]
==== `transaction.removeTask(taskId)`

[source,js]
----
transaction.removeTask('async-task')
----

Removes the task if its present from the associated transaction and also checks if the transaction can be ended when there are no pending tasks to be completed.

Arguments:

* `name` - Required. The name of the task (string).


NOTE: This API will be removed in the next major version, Please use the `startSpan` method with `blocking: true`.


[float]
[[transaction-add-labels]]
==== `transaction.addLabels()`

[source,js]
----
transaction.addLabels({ [name]: value })
----

Add several labels on the transaction. If an error happens during the transaction,
it will also get tagged with the same labels.

Labels are key/value pairs that are indexed by Elasticsearch and therefore searchable (as opposed to data set via <<apm-set-custom-context,`apm.setCustomContext()`>>).

TIP: Before using custom labels, ensure you understand the different types of
{apm-overview-ref-v}/metadata.html[metadata] that are available.

Arguments:

* `name` - Any string. All periods (.), asterisks (*), and double quotation marks (") will be replaced by underscores (_), as those characters have special meaning in Elasticsearch

* `value` - Any string, boolean, or number. All other data types will be converted to a string
before being sent to the APM Server.

WARNING: Avoid defining too many user-specified tags.
Defining too many unique fields in an index is a condition that can lead to a
{ref}/mapping.html#mapping-limit-settings[mapping explosion].

[float]
[[transaction-end]]
==== `transaction.end()`

[source,js]
----
transaction.end()
----

Ends the transaction. If the transaction has already ended, nothing happens.


[float]
[[transaction-mark]]
==== `transaction.mark(key)`

[source,js]
----
transaction.mark(key)
----

Marks the current point in time relative to the start of the transaction.
Use this method to mark significant events that happen while the transaction is active.

Arguments:

* `key` -  Any string. All periods (.), asterisks (*), and double quotation marks (") will be replaced by underscores (_), as those characters have special meaning in Elasticsearch
